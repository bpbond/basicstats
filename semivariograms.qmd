---
title: "Spatial semivariograms"
format: html
author: Ben Bond-Lamberty
editor: visual
---

## Theory

### Variance

The *variance* of a population (a set of values) $X$ is defined as

$$
Var(X) = \frac{1}{n} \sum_{i=1}^{n} (x_{i}-\mu)^2 
$$

where $\mu$ is the average value of $X$. In turn, the *standard deviation* is the square root of the variance.

But usually we want the variance of real-world *sample* data, which by definition is a subset of of all possible observations that could be made. For [technical reasons](https://en.wikipedia.org/wiki/Variance#Population_variance_and_sample_variance), to eliminate bias arising from our limited sample the variance is calculated as

$$
Var(X) = \frac{1}{n-1} \sum_{i=1}^{n} (x_{i}-\mu)^2 
$$

Variance can be calculated by R's `var` function:

```{r}
var(1:6)
sd(1:6) # = sqrt(var(1:6))
```

### Semivariograms

In spatial statistics, the theoretical variogram is a function describing the degree of spatial dependence of a spatial random field or stochastic process.

With real-world data we generally calculate the *empirical semivariogram* $\hat{\gamma}$, defined as half the average squared difference between the values separated at distance $h$:

$$
\hat{\gamma}(h) = \frac{1}{2|N(h)|} \sum_{(i,j) \in{N(h)}}^{} |z_{i}-z_{j}|^2
$$

In other words, each pair of points separated by $h$ form the set of points $N(h)$; the number of these points in this bin is $|N(h)|$. Then for each pair of points $i,j$ the square of the difference in the observation is calculated: $|z_{i}-z_{j}|^2$. These squared differences are added together and normalized by the number of point pairs, and divided by 2 for the semivariogram value at this "lag" (distance of separation).

In practice, we group the lags into bins (groups of numerically similar separation distances). For more details, see [Wikipedia](https://en.wikipedia.org/wiki/Variogram#Empirical_variogram).

The following parameters are often used to describe variograms:

-   *nugget*: The semivariogram value at lag 0. This is often taken as measurement error.

```{=html}
<!-- -->
```
-   *sill*: The limit (asymptote) of the semivariogram at the lag goes to infinity.

-   *range*: The distance at which the sill is attained, or difference of the semivariogram from the sill value becomes negligible.

![](Schematic_variogram.svg)

By Asim Biswas & Bing Cheng Si - <https://www.intechopen.com/chapters/39857,> CC BY 3.0, <https://commons.wikimedia.org/w/index.php?curid=116105041>

## The `meuse` dataset

Consider the `meuse` dataset that is included in the `sp` package:

```{r}
library(sp)
data(meuse)
head(meuse[1:6]) # the first six columns are the most relevant for us
```

This dataset gives locations and topsoil heavy metal concentrations (see `?meuse`) and has `r nrow(meuse)` rows and `r ncol(meuse)` columns.

Let's say we're interested in the spatial distribution of zinc concentrations:

```{r}
library(ggplot2)
ggplot(meuse, aes(x, y, color = zinc)) + geom_point()
```

Note also that the zinc data are not [normally distributed](https://en.wikipedia.org/wiki/Normal_distribution).

```{r}
ggplot(meuse, aes(zinc)) + geom_histogram(bins = 30)
```

Many statistical approaches assume data normality, however, and so we likely want to correct for this by modeling the logarithm of the data, which *is* (relatively) normal:

```{r}
ggplot(meuse, aes(log(zinc))) + geom_histogram(bins = 30)
```

**What is the [spatial dependence](https://en.wikipedia.org/wiki/Spatial_analysis#Spatial_dependence) of the `meuse` zinc data?** In other words, how much do we expect two random samples to vary in their zinc concentrations as a function of their location?

Intuitively, and by looking at the spatial plot above, it seems like samples taken far apart will vary more than samples taken close to each other. We'd like to quantify this.

Like most real-world datasets, `meuse` does not have data at every possible sampling point, and so we first compute the variance between observations at different distances from each other, and then fit an [empirical semivariogram](https://en.wikipedia.org/wiki/Variogram#Empirical_variogram).

## An empirical semivariogram

```{r}
library(gstat)
# gstat::variogram needs to know which columns have the 
# location information. Because we're using a formula when
# calling it, below, we first set the "coordinates" of the
# meuse object; that is, we define which columns contain
# this location information
coordinates(meuse) = ~x+y

# Calculate the sample variogram
v <- variogram(log(zinc) ~ 1, data = meuse)
print(v)
```

What `variogram()` returns is a data frame with `np`, the number of points at each separation distance (or lag) `dist`, and the variogram value `gamma` at that lag.

```{r}
plot(v)
```

It looks like these data have a *nugget* of \~0.1, a *sill* of \~0.6, and a *range* of \~1000. But to get precise values for these parameters, we need to fit a model to our empirical data.

## Fit a semivariogram model

Different theoretical semivariogram models make different assumptions and have [different fitted forms](https://en.wikipedia.org/wiki/Variogram#Variogram_models). We can visualize some of these:

```{r}
show.vgms(models = c("Exp",  # Exponential model
                     "Sph",  # Spherical model
                     "Gau",  # Gaussian model
                     "Nug"), # Nugget model
          nugget = 0.1)
```

Note the "Nug" (nugget) option, which models no spatial dependency at all.

Based on our knowledge of the physical processes at play, and/or examining the empirical data, we choose a model to fit:

```{r}
# fit.variogram() fits a theoretical variogram model,
# generated by vgm(), to our empirical variogram data 
v.fit <- fit.variogram(v, vgm("Sph"))

print(v.fit)

# Did the model-fitting process converge successfully?
# This is not guaranteed for nonlinear models.
attributes(v.fit)$singular
```

We see that the model-fitting process was successful, producing estimates of `r round(v.fit$psill[1], 3)` for the nugget, `r round(v.fit$psill[2], 3)` for the sill, and `r round(v.fit$range[2], 1)` for the range (the distance at which the observations are no longer spatially correlated).

Plot this fitted model against our observational data:

```{r}
# For convenience, use show.vgms() to calculate the
# predicted values for our fitted model
fitted <-show.vgms(min = min(v$dist), 
                   max = max(v$dist), 
                   models ="Sph",
                   range = v.fit$range[2],
                   sill = v.fit$psill[2],
                   nugget = v.fit$psill[1],
                   plot = FALSE)

# Now we can easily plot this against the observed data
ggplot(v, aes(dist, gamma)) + 
  geom_point() + 
  geom_line(data = fitted, 
            aes(distance, semivariance),
            linetype = 2)
```
